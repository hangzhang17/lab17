author: hangzhang17

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import glob as glob
from functools import reduce

###importing raw data from sensors and ref instrument###
#read GRIMM PM2.5#
filefolder_GRIMM = glob.glob(r'J:\AQ-SPEC\Field and Laboratory Evaluation\Laboratory Evaluation\17_Sainsmart\Sainsmart raw data\GRIMM data\*.dat')
print(len(filefolder_GRIMM)) #to double check the number of files in this folder#

#read GRIMM '-M' file using list comprehension#
filefolder_GRIMM_M = [s for s in filefolder_GRIMM if '-M' in s]

GRIMM_M = []
for filename in filefolder_GRIMM_M:
    GRIMM_M.append(pd.read_csv(filename, sep='\t', skiprows=12, parse_dates=True, index_col=0))
df_GRIMM_M_1min_PM25 = pd.concat(GRIMM_M)[['PM2.5 [ug/m3]']].resample('1T').mean()
df_GRIMM_M_1min_PM25.index.rename('DateTime', inplace=True)

#read GRIMM '-L' file using list comprehension#
filefolder_GRIMM_L = [s for s in filefolder_GRIMM if '-L' in s]

GRIMM_L = []
for filename in filefolder_GRIMM_L:
    GRIMM_L.append(pd.read_csv(filename, sep='\t', skiprows=14, encoding='ISO-8859-1', parse_dates=True, index_col=0))
df_GRIMM_L_1min_TRH = pd.concat(GRIMM_L)[['Temperature [°C]', 'Humidity [%rH]']].resample('1T').mean()
df_GRIMM_L_1min_TRH.index.rename('DateTime', inplace=True)

#merge GRIMM PM2.5, T, RH data#
df_GRIMM_1min = pd.merge(df_GRIMM_M_1min_PM25, df_GRIMM_L_1min_TRH, how='left', left_index=True, right_index=True)

#loop Sainsmart sensor folder#
filefolder_Sensor = glob.glob(r'J:\AQ-SPEC\Field and Laboratory Evaluation\Laboratory Evaluation\17_Sainsmart\Sainsmart sensor excel\*.xlsx')
print(len(filefolder_Sensor))

sensor_PM25 = []
for sensorfile in filefolder_Sensor:
    temp_sensor = pd.read_excel(sensorfile, parse_dates=True, index_col='DateTime').iloc[:,1].resample('1T').mean()
    sensor_PM25.append(temp_sensor)
df_sensor_PM25 = pd.concat(sensor_PM25, axis=1)

###merging, matching, cleaning dataset###
#merge GRIMM and Sensor#
#from functools import reduce#
GRIMMSensor = [df_GRIMM_1min, df_sensor_PM25]
df_GRIMMSensor = reduce(lambda x, y: pd.merge(x, y, how='left', left_index=True, right_index=True), GRIMMSensor)

###10 lab experiments###
#truncate to 10 experiments#
#exp0: 20C40RHConcRamp; exp1: 5Clow; exp2: 5Cmed; exp3: 5Chigh; exp4: 20Clow; exp5: 20Cmed; exp6: 20Chigh; exp7: 35Clow; exp8: 35Cmed; exp9: 35Chigh#
expT = pd.read_excel(r'J:\AQ-SPEC\Field and Laboratory Evaluation\Laboratory Evaluation\17_Sainsmart\SainsmartExpT.xlsx')

EXP = []
for idx, row in expT.iterrows():
    temp = df_GRIMMSensor[row['StartT']:row['EndT']]
    temp.insert(0, 'elapsedT', np.arange(len(temp)))
    EXP.append(temp)
    exec("exp" + str(idx) + "=temp")
    expFileName = "J:\\AQ-SPEC\\Field and Laboratory Evaluation\\Laboratory Evaluation\\17_Sainsmart\\Sainsmart to_csv\\"
    temp.to_csv(expFileName + row['ExpName'] + '.csv')

###for data recovery###
EXP_df = pd.concat(EXP)
EXP_df.info()
#4/3/2018results: GRIMM 3190 non-null float, 001_PM2.5 3177; 002_PM2.5 3180; 003_PM2.5 3190#

###accuracy table###
exp0_step1 = exp0.iloc[121:151, [0, 1, 4, 5, 6]]
exp0_step1['avg_sensor'] = exp0_step1[['002_PM2.5', '001_PM2.5', '003_PM2.5']].mean(axis=1)
Ref_step1 = str(round(exp0_step1['PM2.5 [ug/m3]'].mean(), 1))
avg_sensor_step1 = str(round(exp0_step1['avg_sensor'].mean(), 1))
exp0_step1_accuracy = str(100- round(abs(exp0_step1['PM2.5 [ug/m3]'].mean() - exp0_step1['avg_sensor'].mean())/(exp0_step1['PM2.5 [ug/m3]'].mean())*100))

exp0_step2 = exp0.iloc[271:301, [0, 1, 4, 5, 6]]
exp0_step2['avg_sensor'] = exp0_step2[['002_PM2.5', '001_PM2.5', '003_PM2.5']].mean(axis=1)
Ref_step2 = str(round(exp0_step2['PM2.5 [ug/m3]'].mean(), 1))
avg_sensor_step2 = str(round(exp0_step2['avg_sensor'].mean(), 1))
exp0_step2_accuracy = str(100 - round(abs(exp0_step2['PM2.5 [ug/m3]'].mean() - exp0_step2['avg_sensor'].mean())/(exp0_step2['PM2.5 [ug/m3]'].mean())*100))

exp0_step3 = exp0.iloc[421:451, [0, 1, 4, 5, 6]]
exp0_step3['avg_sensor'] = exp0_step3[['002_PM2.5', '001_PM2.5', '003_PM2.5']].mean(axis=1)
Ref_step3 = str(round(exp0_step3['PM2.5 [ug/m3]'].mean(), 1))
avg_sensor_step3 = str(round(exp0_step3['avg_sensor'].mean(), 1))
exp0_step3_accuracy = str(100 - round(abs(exp0_step3['PM2.5 [ug/m3]'].mean() - exp0_step3['avg_sensor'].mean())/(exp0_step3['PM2.5 [ug/m3]'].mean())*100))

exp0_step4 = exp0.iloc[571:601, [0, 1, 4, 5, 6]]
exp0_step4['avg_sensor'] = exp0_step4[['002_PM2.5', '001_PM2.5', '003_PM2.5']].mean(axis=1)
Ref_step4 = str(round(exp0_step4['PM2.5 [ug/m3]'].mean(), 1))
avg_sensor_step4 = str(round(exp0_step4['avg_sensor'].mean(), 1))
exp0_step4_accuracy = str(100 - round(abs(exp0_step4['PM2.5 [ug/m3]'].mean() - exp0_step4['avg_sensor'].mean())/(exp0_step4['PM2.5 [ug/m3]'].mean())*100))

exp0_step5 = exp0.iloc[721:751, [0, 1, 4, 5, 6]]
exp0_step5['avg_sensor'] = exp0_step5[['002_PM2.5', '001_PM2.5', '003_PM2.5']].mean(axis=1)
Ref_step5 = str(round(exp0_step5['PM2.5 [ug/m3]'].mean(), 1))
avg_sensor_step5 = str(round(exp0_step5['avg_sensor'].mean(), 1))
exp0_step5_accuracy = str(100 - round(abs(exp0_step5['PM2.5 [ug/m3]'].mean() - exp0_step5['avg_sensor'].mean())/(exp0_step5['PM2.5 [ug/m3]'].mean())*100))

print('step 1: ' + 'Ref = ' + Ref_step1 + ' avg_sensor = ' + avg_sensor_step1 + ' Accuracy =' + exp0_step1_accuracy + '%')
print('step 2: ' + 'Ref = ' + Ref_step2 + ' avg_sensor = ' + avg_sensor_step2 + ' Accuracy =' + exp0_step2_accuracy + '%')
print('step 3: ' + 'Ref = ' + Ref_step3 + ' avg_sensor = ' + avg_sensor_step3 + ' Accuracy =' + exp0_step3_accuracy + '%')
print('step 4: ' + 'Ref = ' + Ref_step4 + ' avg_sensor = ' + avg_sensor_step4 + ' Accuracy =' + exp0_step4_accuracy + '%')
print('step 5: ' + 'Ref = ' + Ref_step5 + ' avg_sensor = ' + avg_sensor_step5 + ' Accuracy =' + exp0_step5_accuracy + '%')
#step 1: Ref = 16.2 avg_sensor = 26.8 Accuracy =35%#
#step 2: Ref = 45.7 avg_sensor = 66.0 Accuracy =56%#
#step 3: Ref = 98.8 avg_sensor = 135.3 Accuracy =63%#
#step 4: Ref = 186.6 avg_sensor = 248.6 Accuracy =67%#
#step 5: Ref = 270.6 avg_sensor = 355.4 Accuracy =69%#

###intra-model variability###
intra_low = exp0_step1.iloc[10:30]
intra_medium = exp0_step3.iloc[10:30]
intra_high = exp0_step5.iloc[10:30]
#need to export#

###20C40RH plot and linear regression###
#plot exp0#
exp0_5min = EXP[0].resample('5T').mean()
plt.title(r'$PM_{2.5}$' + ' Conc. Ramping at 20°C and 40% RH ')
plt.xlabel('Experiment time (min)')
plt.ylabel('5-min mean ' + r'$PM_{2.5}$' + ' Conc. ' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.plot(exp0_5min['elapsedT'], exp0_5min['PM2.5 [ug/m3]'], color='red', label='GRIMM')
plt.plot(exp0_5min['elapsedT'], exp0_5min['001_PM2.5'], color='blue', label='Sensor001')
plt.plot(exp0_5min['elapsedT'], exp0_5min['002_PM2.5'], color='green', label='Sensor002')
plt.plot(exp0_5min['elapsedT'], exp0_5min['003_PM2.5'], color='orange', label='Sensor003')
plt.legend(loc='upper left')

plt.tick_params(labelsize='large')
plt.tight_layout()
#save plot exp0#

#plot linear regression#
exp0_5min['sensor-avg'] = exp0_5min[['001_PM2.5', '002_PM2.5', '003_PM2.5']].mean(axis=1)
x = exp0_5min['sensor-avg']
y = exp0_5min['PM2.5 [ug/m3]']

import scipy
slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(x, y)
print('linear fitted equation: ' + str(slope) +'*x + ' + str(intercept))
print('R^2 = ' + str(r_value**2))

linearfit = np.polyfit(x, y, 1)
linearfit_fn = np.poly1d(linearfit)

plt.plot(x, y, 'bo', x, linearfit_fn(x), '-r')
plt.title('GRIMM vs Sainsmart ' + r'$PM_{2.5}$' + ' mass conc. ' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.xlabel('Average of 3 Sainsmart sensors')
plt.ylabel('FEM GRIMM')
plt.xticks([0, 100, 200, 300, 400])
plt.yticks([0, 100, 200, 300, 400])
plt.annotate('y = 0.79x - 4.13', (50, 300))
plt.annotate(r'$R^2$' + '= 0.99', (50, 275))

###9 T/RH variation plots###
#exp1#
plt.subplot(2,2,1)
plt.title('SainSmart vs FEM GRIMM \n 5 °C RH ramping low ' + r'$PM_{2.5}$' + ' Conc.')
plt.ylabel('1-min mean ' + r'$PM_{2.5}$' + ' Conc.' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.xlabel('Experiment time (min)')
plt.plot(exp1['elapsedT'], exp1['PM2.5 [ug/m3]'], color='red', label='GRIMM')
plt.plot(exp1['elapsedT'], exp1['001_PM2.5'], color='blue', label='Sensor001')
plt.plot(exp1['elapsedT'], exp1['002_PM2.5'], color='green', label='Sensor002')
plt.plot(exp1['elapsedT'], exp1['003_PM2.5'], color='orange', label='Sensor003')
plt.legend(loc='upper left')

#exp2#
plt.subplot(2,2,2)
plt.title('SainSmart vs FEM GRIMM \n 5 °C RH ramping medium ' + r'$PM_{2.5}$' + ' Conc.')
plt.ylabel('1-min mean ' + r'$PM_{2.5}$' + ' Conc.' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.xlabel('Experiment time (min)')
plt.plot(exp2['elapsedT'], exp2['PM2.5 [ug/m3]'], color='red', label='GRIMM')
plt.plot(exp2['elapsedT'], exp2['001_PM2.5'], color='blue', label='Sensor001')
plt.plot(exp2['elapsedT'], exp2['002_PM2.5'], color='green', label='Sensor002')
plt.plot(exp2['elapsedT'], exp2['003_PM2.5'], color='orange', label='Sensor003')
plt.legend(loc='upper left')

#exp3#
plt.subplot(2,2,3)
plt.title('SainSmart vs FEM GRIMM \n 5 °C RH ramping high ' + r'$PM_{2.5}$' + ' Conc.')
plt.ylabel('1-min mean ' + r'$PM_{2.5}$' + ' Conc.' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.xlabel('Experiment time (min)')
plt.plot(exp3['elapsedT'], exp3['PM2.5 [ug/m3]'], color='red', label='GRIMM')
plt.plot(exp3['elapsedT'], exp3['001_PM2.5'], color='blue', label='Sensor001')
plt.plot(exp3['elapsedT'], exp3['002_PM2.5'], color='green', label='Sensor002')
plt.plot(exp3['elapsedT'], exp3['003_PM2.5'], color='orange', label='Sensor003')
plt.legend(loc='upper left')

#exp4#
plt.subplot(2,2,1)
plt.title('SainSmart vs FEM GRIMM \n 20 °C RH ramping low ' + r'$PM_{2.5}$' + ' Conc.')
plt.ylabel('1-min mean ' + r'$PM_{2.5}$' + ' Conc.' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.xlabel('Experiment time (min)')
plt.plot(exp4['elapsedT'], exp4['PM2.5 [ug/m3]'], color='red', label='GRIMM')
plt.plot(exp4['elapsedT'], exp4['001_PM2.5'], color='blue', label='Sensor001')
plt.plot(exp4['elapsedT'], exp4['002_PM2.5'], color='green', label='Sensor002')
plt.plot(exp4['elapsedT'], exp4['003_PM2.5'], color='orange', label='Sensor003')
plt.legend(loc='upper left')

#exp5#
plt.subplot(2,2,2)
plt.title('SainSmart vs FEM GRIMM \n 20 °C RH ramping medium ' + r'$PM_{2.5}$' + ' Conc.')
plt.ylabel('1-min mean ' + r'$PM_{2.5}$' + ' Conc.' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.xlabel('Experiment time (min)')
plt.plot(exp5['elapsedT'], exp5['PM2.5 [ug/m3]'], color='red', label='GRIMM')
plt.plot(exp5['elapsedT'], exp5['001_PM2.5'], color='blue', label='Sensor001')
plt.plot(exp5['elapsedT'], exp5['002_PM2.5'], color='green', label='Sensor002')
plt.plot(exp5['elapsedT'], exp5['003_PM2.5'], color='orange', label='Sensor003')
plt.legend(loc='upper left')

#exp6#
plt.subplot(2,2,3)
plt.title('SainSmart vs FEM GRIMM \n 20 °C RH ramping high ' + r'$PM_{2.5}$' + ' Conc.')
plt.ylabel('1-min mean ' + r'$PM_{2.5}$' + ' Conc.' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.xlabel('Experiment time (min)')
plt.plot(exp6['elapsedT'], exp6['PM2.5 [ug/m3]'], color='red', label='GRIMM')
plt.plot(exp6['elapsedT'], exp6['001_PM2.5'], color='blue', label='Sensor001')
plt.plot(exp6['elapsedT'], exp6['002_PM2.5'], color='green', label='Sensor002')
plt.plot(exp6['elapsedT'], exp6['003_PM2.5'], color='orange', label='Sensor003')
plt.legend(loc='upper left')

#exp7#
plt.subplot(2,2,1)
plt.title('SainSmart vs FEM GRIMM \n 35 °C RH ramping low ' + r'$PM_{2.5}$' + ' Conc.')
plt.ylabel('1-min mean ' + r'$PM_{2.5}$' + ' Conc.' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.xlabel('Experiment time (min)')
plt.plot(exp7['elapsedT'], exp7['PM2.5 [ug/m3]'], color='red', label='GRIMM')
plt.plot(exp7['elapsedT'], exp7['001_PM2.5'], color='blue', label='Sensor001')
plt.plot(exp7['elapsedT'], exp7['002_PM2.5'], color='green', label='Sensor002')
plt.plot(exp7['elapsedT'], exp7['003_PM2.5'], color='orange', label='Sensor003')
plt.legend(loc='upper left')

#exp8#
plt.subplot(2,2,2)
plt.title('SainSmart vs FEM GRIMM \n 35 °C RH ramping medium ' + r'$PM_{2.5}$' + ' Conc.')
plt.ylabel('1-min mean ' + r'$PM_{2.5}$' + ' Conc.' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.xlabel('Experiment time (min)')
plt.plot(exp8['elapsedT'], exp8['PM2.5 [ug/m3]'], color='red', label='GRIMM')
plt.plot(exp8['elapsedT'], exp8['001_PM2.5'], color='blue', label='Sensor001')
plt.plot(exp8['elapsedT'], exp8['002_PM2.5'], color='green', label='Sensor002')
plt.plot(exp8['elapsedT'], exp8['003_PM2.5'], color='orange', label='Sensor003')
plt.legend(loc='upper left')

#exp9#
plt.subplot(2,2,3)
plt.title('SainSmart vs FEM GRIMM \n 35 °C RH ramping high ' + r'$PM_{2.5}$' + ' Conc.')
plt.ylabel('1-min mean ' + r'$PM_{2.5}$' + ' Conc.' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.xlabel('Experiment time (min)')
plt.plot(exp9['elapsedT'], exp9['PM2.5 [ug/m3]'], color='red', label='GRIMM')
plt.plot(exp9['elapsedT'], exp9['001_PM2.5'], color='blue', label='Sensor001')
plt.plot(exp9['elapsedT'], exp9['002_PM2.5'], color='green', label='Sensor002')
plt.plot(exp9['elapsedT'], exp9['003_PM2.5'], color='orange', label='Sensor003')
plt.legend(loc='upper left')

#standard error equation#
#SE = np.std(data) / np.sqrt(len(data))#

###precision###
#515lowPM, 540lowPM, 565lowPM,
GRIMM_precision_label = ['GRIMM_P_515lowPM', 'GRIMM_P_540lowPM', 'GRIMM_P_565lowPM', 'GRIMM_P_515medPM', 'GRIMM_P_540medPM', 'GRIMM_P_565medPM', 'GRIMM_P_515highPM', 'GRIMM_P_540highPM', 'GRIMM_P_565highPM']
sensor_precision_label = ['sensor_P_515lowPM', 'sensor_P_540lowPM', 'sensor_P_565lowPM', 'sensor_P_515medPM', 'sensor_P_540medPM', 'sensor_P_565medPM', 'sensor_P_515highPM', 'sensor_P_540highPM', 'sensor_P_565highPM']
GRIMM_P_515lowPM = 100 - (np.std(exp1['PM2.5 [ug/m3]'].iloc[131:151]) / np.sqrt(len(exp1['PM2.5 [ug/m3]'].iloc[131:151])) / np.mean(exp1['PM2.5 [ug/m3]'].iloc[131:151])) * 100

###for condensed report###
#exp2#
plt.subplot(2,2,1)
plt.title('SainSmart vs FEM GRIMM \n 5 °C RH ramping medium ' + r'$PM_{2.5}$' + ' Conc.')
plt.ylabel('1-min mean ' + r'$PM_{2.5}$' + ' Conc.' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.xlabel('Experiment time (min)')
plt.plot(exp2['elapsedT'], exp2['PM2.5 [ug/m3]'], color='red', label='GRIMM')
plt.plot(exp2['elapsedT'], exp2['001_PM2.5'], color='blue', label='Sensor001')
plt.plot(exp2['elapsedT'], exp2['002_PM2.5'], color='green', label='Sensor002')
plt.plot(exp2['elapsedT'], exp2['003_PM2.5'], color='orange', label='Sensor003')
plt.legend(loc='upper left')

#exp8#
plt.subplot(2,2,4)
plt.title('SainSmart vs FEM GRIMM \n 35 °C RH ramping medium ' + r'$PM_{2.5}$' + ' Conc.')
plt.ylabel('1-min mean ' + r'$PM_{2.5}$' + ' Conc.' + r'$(\mu$' + 'g/' + r'$m^3$' + ')')
plt.xlabel('Experiment time (min)')
plt.plot(exp8['elapsedT'], exp8['PM2.5 [ug/m3]'], color='red', label='GRIMM')
plt.plot(exp8['elapsedT'], exp8['001_PM2.5'], color='blue', label='Sensor001')
plt.plot(exp8['elapsedT'], exp8['002_PM2.5'], color='green', label='Sensor002')
plt.plot(exp8['elapsedT'], exp8['003_PM2.5'], color='orange', label='Sensor003')
plt.legend(loc='upper left')
